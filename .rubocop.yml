AllCops:
  TargetRubyVersion: 2.2
  Exclude:
    - 'config.ru'
    - 'db/**/*'
    - 'bin/**/*'
    - '.gitignore'
    - 'spec/**/*.rb'
    - 'config/routes.rb'
    - 'lib/tasks/*.rake'
Style/Semicolon:
  Exclude:
    - spec/**/*.rb
Style/UnlessElse:
  Exclude:
Layout/EmptyLinesAroundBlockBody:
  Exclude:
    - spec/models/*.rb
Style/AsciiComments:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

Style/Lambda:
  EnforcedStyle: literal
  
Style/RedundantBegin:
  Enabled: false

Style/RedundantReturn:
  Enabled: true
  
Metrics/AbcSize:
  Max: 25
# Commonly used screens these days easily fit more than 80 characters.
Metrics/LineLength:
  Max: 120
  Exclude:
    - config/initializers/devise.rb
# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20

Metrics/CyclomaticComplexity:
  Max: 10

Metrics/PerceivedComplexity:
  Max: 10

# Method name to be snake_case instead of CamelCase
Naming/MethodName:
  EnforcedStyle: snake_case

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 1500

Metrics/ModuleLength:
  Max: 150

Style/MethodCalledOnDoEndBlock:
  Exclude:
    - lib/tasks/*.rake

# No space makes the method definition shorter and differentiates
# from a regular assignment.
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# We do not need to support Ruby 1.9, so this is good to use.
Style/SymbolArray:
  Enabled: true

# Most readable form.
Layout/AlignHash:
  Enabled: false
  EnforcedHashRocketStyle: table
  EnforcedColonStyle: table

# Mixing the styles looks just silly.
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # inject seems more common in the community.
    reduce: "inject"

# Either allow this style or don't. Marking it as safe with parenthesis
# is silly. Let's try to live without them for now.
Style/ParenthesesAroundCondition:
  AllowSafeAssignment: false

Lint/UselessAssignment:
  Exclude:
    - spec/models/*.rb

Lint/AssignmentInCondition:
  AllowSafeAssignment: false

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise


Layout/SpaceInsideBlockBraces:
  # The space here provides no real gain in readability while consuming
  # horizontal space that could be used for a better parameter name.
  # Also {| differentiates better from a hash than { | does.
  SpaceBeforeBlockParameters: true

# No trailing space differentiates better from the block:
# foo} means hash, foo } means block.
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space
  EnforcedStyleForEmptyBraces: no_space

Style/BlockDelimiters:
  EnforcedStyle: line_count_based
  Exclude:
    - spec/models/*.rb

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true
  Exclude:
    - lib/tasks/*.rake

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Check with yard instead.
Style/Documentation:
  Enabled: false


# This is just silly. Calling the argument `other` in all cases makes no sense.
Naming/BinaryOperatorParameterName:
  Enabled: false

# Style preference
Style/MethodDefParentheses:
  Enabled: require_parentheses

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# There are valid cases, for example debugging Cucumber steps,
# also they'll fail CI anyway
Lint/Debugger:
  Enabled: false

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/HandleExceptions:
  Enabled: false
